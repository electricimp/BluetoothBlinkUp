//
//  BUConfigId.swift
//  BlinkUpSwiftSDK
//
//  Created by Brett Park on 2015-04-27.
//
//  MIT License
//
//  Copyright 2014-2017 Electric Imp
//
//  SPDX-License-Identifier: MIT
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be
//  included in all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
//  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
//  OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//  OTHER DEALINGS IN THE SOFTWARE.


import BlinkUp

extension BUConfigId {
  
  /**
  Swift specific initializer with automatic planId retrieval
  
  :param: apiKey  The APIKey assigned to you from Electric Imp
  :param: handler Closure called when the configuration id is 
    retrieved from the Electric Imp server.
  
  :returns: ConfigId that may or may not be active
  */
  convenience public init(apiKey:String, handler: @escaping (_ response:ConfigIdResponse) -> ()) {
    self.init(apiKey: apiKey, completionHandler: BUConfigId.convertHandlerToObjC(handler))
  }
  
  /**
  Swift specific initializer with existing planId
  
  :param: apiKey  The APIKey assigned to you from Electric Imp
  :param: planId  If setting the planId property, it must be an
    existing Id previously generated by Electric Imp
  :param: handler Closure called when the configuration id is
  retrieved from the Electric Imp server.
  
  :returns: ConfigId that may or may not be active
  */
  convenience public init(apiKey:String, planId:String,handler: @escaping (_ response:ConfigIdResponse) -> ()) {
    self.init(apiKey: apiKey, planId: planId, completionHandler: BUConfigId.convertHandlerToObjC(handler))
  }
  
  /**
  Swift enumeration of ConfigId retrieval results
  
  - Activated: The ConfigId that was retrieved. The object is the same as self but is provided 
    here for easier use.
  - Error:     Error that occured during ConfigId retrieval
  */
  public enum ConfigIdResponse {
    case activated(activeConfig: BUConfigId)
    case error(NSError)
  }
  
  /**
  Swift Internal method for closure conversion
  */
  class internal func convertHandlerToObjC (_ handler: @escaping (_ response:ConfigIdResponse) -> ()) -> BUConfigIdCompletionHandler
  {
    let objCHandler: BUConfigIdCompletionHandler = {(goodConfigId, error) -> Void in
      var properResponse :ConfigIdResponse
      switch (goodConfigId, error) {
      case (_, let e) where e != nil:
        properResponse = ConfigIdResponse.error(e! as NSError)
      default:
        properResponse = ConfigIdResponse.activated (activeConfig: goodConfigId)
      }
      
      handler(properResponse)
    }
    
    return objCHandler
  }
}
